--------------------------------------------
--- CORS - Cross-Origin Resource Sharing ---
--------------------------------------------
- It's just a way of allowing code that is in one S3 bucket to access or reference code that is in another S3 bucket. So really we're just allowing one resource to access another resource, and that's why it's called cross-origin resource sharing.

So for this demo - 
STEP-1 --->>> We'll configure one bucket containing index.html
STEP-2 --->>> Another bucket where we'll store another web page named loadpage.html.
STEP-3 --->>> We'll then configure cross-origin resource sharing

--- Outcome ---
This is going to allow the file in our first bucket to read the file in our second. And then when a user tries to access the website and they go to index.html, index.html is going to reference loadpage.html, and the website should display both files.


- Go to AWS Management Console --->>> we're just going to go down to S3, which is on the left-hand side, under storage --->>>  Create a new bucket and we're going to call it myindexwebsite.
- We're going to configure this as a public bucket. So I'm going to uncheck all of the public access protection, acknowledge the new settings, and then click Create Bucket.
- And then we go into that bucket and we go to Properties, scroll down to the bottom, and we're going to enable static website hosting. So this allows you to host a static website from within S3. So we go in and select Enable, specify the default home page and error page, and save changes.
- And when we use S3 to host a website, they provide you with this website endpoint URL, and it's this website endpoint that we use to access the website.
- And when we configure CORS between one S3 website and another, the access request is linked to this endpoint URL. So it's this endpoint URL that we configure the access for between the two S3 buckets.
- So now we are ready to upload our website files. So let's take a look at those. So we've got index.html here, and all these files are available in the resources section of the course.
- So this is just a simple web page, which it just says welcome to the index page, and then it just runs this simple script, which loads up the contents of another page, and this is the page that we're going to be storing in another S3 bucket. So it's just using the script to get that HTML from the other S3 bucket.

So let's take a look at loadpage.html. And, again, it's just a really, really simple piece of HTML code, just displaying, "The page has successfully loaded Cloud Gurus."

- So when you load your index.html, what you should see on the screen is you should see the welcome message, and then underneath you should see the message that says "The page has successfully loaded Cloud Gurus."

- So we're going to upload these three files into our S3 bucket. So within your S3 bucket, head to Objects and upload, add files.
- So we just go in and select all three of those files, scroll down to additional upload options at the bottom, and we're going to grant public read access because this is going to be a website. And upload, and we just need to select this checkbox to continue.
- So if all our files have loaded successfully, we should be able to access them as though they were a website.
- So exit this screen and head to Properties and into static website hosting, and we're going to grab this static web hosting URL, and that should take us straight to the index page.

- So you can see that it's loaded the index page and it has also sourced the HTML from loadpage.html, because it's displaying a second message down here as well.
- So right now all of these files are located in one single bucket, but we want to have our load page located in a different bucket so that we can set up the cross-origin resource sharing.

- So we're going to go back to our original S3 bucket, and we're going to delete that load page because we're going to store it in a different bucket. Exit this screen.

--- Create Another Bucket ---
- We're going to create a new bucket. So this one's going to be mycorstestbucket.
- Uncheck all of the public access protection, acknowledge these settings, and then click Create Bucket.
- Then we go back into that bucket, hit Properties, select static website hosting, Edit, and Enable. Specify our default webpages -- index and error.html and hit Save.
- So then we want to go back into our bucket and upload our loadpage.html. Grant public read access, and it's at the bottom under Additional Upload Options. Don't forget to acknowledge your settings, and upload.
- So let's just check that we can access our loadpage.html using the website endpoint for our bucket. So in order to do that, we go to Properties on the bucket, scroll down to Static Web Hosting, and we use this endpoint URL, and we need to specify the name of the file. So add /loadpage.html.
- So that's our website URL for our loadpage.html.
- So we just want to copy that because we need to update our index.html to know where to find loadpage.html.
- So we go back to our file and replace that loadpage.html with the URL for the correct location. So hopefully that's clear.
- We have index.html in one bucket and it's referencing the loadpage.html, which is located in another bucket, and it's referencing load page via the HTTP endpoint address. So hit Save, and then we go back to our original index bucket.
- We need to get rid of this old version. So we're going to, I'm just going to delete it because it's quicker, the quickest way to get rid of the old version and upload the new version, select our updated file. Open. Grant public read access. Acknowledge. And upload. Exit.


--- Test Website without CORS Config ---
- we will go and test our website, and I'm expecting, it's only going to show us that first page. So it's only going to show us the index.html, and we shouldn't be allowed to access the contents of our second bucket, even though that bucket is publicly accessible.
- So let's just give this a go now. So if we go to Properties, down to the bottom to Static Web Hosting, and click on your static web hosting endpoint URL. So it only allows us to access index.html. It doesn't give us access to the contents of the second bucket because we don't have CORS set up. And if you're a Chrome user like me, you can view the browser error messages by just going to View, Developer, and select Developer Tools, and this is going to show us the error messages associated with this page, and straight away, we can see that our request has been blocked by the CORS policy.
- So no Access-Control-Allow-Origin header is present in the requested resource. So it's failed to load the resource, and the server has responded with a status of 403. So that's a really easy way to see the error messages in your browser.
- And if you're using Internet Explorer, then just load up the developer tools and find your JavaScript errors, and you should see a really similar error in there as well.
- So it's not letting us access the loadpage.html because we don't have CORS set up. So that is exactly what we're going to go and do now.


--- Configure CORS ---
- In order to configure CORS, we need to go and find our website address for index.html, because that is the file which is trying to access our load page.
- So back in our S3 console, it's under Static Web Hosting, and we need to copy this endpoint address.
- Then we go back into our CORS test bucket, go to Permissions, scroll down to the CORS configuration section, select Edit, and this is where we add our CORS configuration, and the first thing I'm going to do is paste my static web hosting URL in here because we'll need it for our CORS configuration.
- And now I'll show you the rest of the code that we're going to use. And the code we need is in the resources section of the course. And here it is.
- So just copy this and paste it into your console. So the one thing that you need to add in here is the allowed origins. So where it says star, delete that star and add in your URL. Hit Save.
- So that should be everything that we need to do to enable the cross-origin resource sharing. So let's go ahead and test it.


--- Test Website without CORS Config ---
- Come back to our index website, go to Properties, down at the bottom, And grab our website URL. And there we go. It's worked.
- So you should see "welcome to the index page" and "this page has successfully loaded cloud gurus," and this second part of the webpage is being loaded from our other bucket.
- So my one was called mycorstestbucket-faye. So hopefully you're seeing both of those messages.

-------------------
--- Conclusions ---
-------------------
- So cross-origin resource sharing is a really good way to organize your website. For example --
- You could store image files in one bucket, JavaScript in another bucket, and plain HTML in another, and then use cross-origin resource sharing to allow the resources from one bucket to access the resources in another bucket.
- And remember by default resources in one bucket cannot access the resources in another.
- If universal access were allowed, that would leave your resources open to attack and CORS is the safe mechanism to allow controlled access between one resource and another.

